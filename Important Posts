import networkx as nx
import matplotlib.pyplot as plt

# Adjacency list representation of the graph
# Each user or post is a key, and the value is a list of (connected_node, relationship_type) pairs
adjacency_list = {
    "User1": [("Post1", "authored"), ("Post2", "viewed")],
    "User2": [("Post1", "viewed"), ("Post3", "authored")],
    "User3": [("Post1", "commented"), ("Post3", "viewed")],
    "Post1": [("User3", "viewed")],  # Reverse relationships for completeness
    "Post3": [("User2", "authored"), ("User3", "viewed")]
}

# Post data: attributes for importance calculation
post_data = {
    "Post1": {"views": 10, "comments": 5},
    "Post2": {"views": 3, "comments": 1},
    "Post3": {"views": 7, "comments": 10},
}

# Function to calculate importance of posts
def calculate_importance(post_data, criteria="blend"):
    importance = {}
    for post, data in post_data.items():
        if criteria == "views":
            importance[post] = data["views"]
        elif criteria == "comments":
            importance[post] = data["comments"]
        elif criteria == "blend":
            importance[post] = 0.7 * data["views"] + 0.3 * data["comments"]
        else:
            raise ValueError("Invalid criteria. Choose 'views', 'comments', or 'blend'.")
    return importance

# Function to construct the graph using NetworkX
def construct_graph(adjacency_list):
    G = nx.DiGraph()
    for node, neighbors in adjacency_list.items():
        G.add_node(node, type="post" if "Post" in node else "user")
        for neighbor, relationship in neighbors:
            G.add_edge(node, neighbor, relationship=relationship)
    return G

# Function to visualize the social media network
def visualize_social_media_network(G, importance, criteria="blend"):
    # Generate node sizes and colors based on importance
    node_sizes = [
        1000 + 2000 * importance[node] if node in importance else 800
        for node in G.nodes
    ]
    node_colors = [
        "red" if node in importance and importance[node] == max(importance.values()) else
        "orange" if node in importance else "blue"
        for node in G.nodes
    ]

    # Generate positions for nodes
    pos = nx.spring_layout(G, seed=42)

    # Draw nodes, edges, and labels
    plt.figure(figsize=(12, 8))
    nx.draw(
        G, pos, with_labels=True, node_size=node_sizes, node_color=node_colors, edge_color="gray", arrowsize=15
    )
    edge_labels = nx.get_edge_attributes(G, "relationship")
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

    # Add title and legend
    plt.title(f"Social Media Network Visualization (Importance: {criteria})")
    plt.show()

# Main workflow
if __name__ == "__main__":
    # Step 1: Calculate post importance
    criteria = "blend"  # Can be 'views', 'comments', or 'blend'
    importance = calculate_importance(post_data, criteria=criteria)

    # Step 2: Construct the graph
    G = construct_graph(adjacency_list)

    # Step 3: Visualize the graph
    visualize_social_media_network(G, importance, criteria)
